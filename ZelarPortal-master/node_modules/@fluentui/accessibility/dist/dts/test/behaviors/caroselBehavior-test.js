"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var accessibility_1 = require("@fluentui/accessibility");
var roleDescription = 'carousel';
var label = 'portrait collection';
// set both props to false, as tests are writen in 'Carousel-test.tsx' file
var paddleHiddenProps = {
    paddlePreviousHidden: false,
    paddleNextHidden: false,
};
describe('carouselBehavior.ts', function () {
    describe('root', function () {
        test("sets \"role=region\" when carousel has NO navigation", function () {
            var expectedResult = accessibility_1.carouselBehavior(__assign({ ariaLiveOn: false, navigation: false }, paddleHiddenProps));
            expect(expectedResult.attributes.root.role).toEqual('region');
        });
        test('sets "aria-roledescription" when carousel has NO navigation', function () {
            var expectedResult = accessibility_1.carouselBehavior(__assign({ ariaLiveOn: false, navigation: false, 'aria-roledescription': roleDescription }, paddleHiddenProps));
            expect(expectedResult.attributes.root['aria-roledescription']).toEqual(roleDescription);
        });
        test('sets "aria-label" when carousel has NO navigation', function () {
            var expectedResult = accessibility_1.carouselBehavior(__assign({ ariaLiveOn: false, navigation: false, 'aria-label': label }, paddleHiddenProps));
            expect(expectedResult.attributes.root['aria-label']).toEqual(label);
        });
        test('do NOT set aria atributes and role when carousel has navigation', function () {
            var expectedResult = accessibility_1.carouselBehavior(__assign({ ariaLiveOn: false, navigation: true, 'aria-roledescription': roleDescription, 'aria-label': label }, paddleHiddenProps));
            expect(expectedResult.attributes.root['aria-roledescription']).toBeUndefined();
            expect(expectedResult.attributes.root['aria-label']).toBeUndefined();
            expect(expectedResult.attributes.root.role).toBeUndefined();
        });
    });
    describe('itemsContainer', function () {
        test("sets \"role=region\" when carousel has navigation", function () {
            var expectedResult = accessibility_1.carouselBehavior(__assign({ ariaLiveOn: false, navigation: true }, paddleHiddenProps));
            expect(expectedResult.attributes.itemsContainer.role).toEqual('region');
        });
        test('sets "aria-roledescription" when carousel has navigation', function () {
            var expectedResult = accessibility_1.carouselBehavior(__assign({ ariaLiveOn: false, navigation: true, 'aria-roledescription': roleDescription }, paddleHiddenProps));
            expect(expectedResult.attributes.itemsContainer['aria-roledescription']).toEqual(roleDescription);
        });
        test('sets "aria-label" when carousel has navigation', function () {
            var expectedResult = accessibility_1.carouselBehavior(__assign({ ariaLiveOn: false, navigation: true, 'aria-label': label }, paddleHiddenProps));
            expect(expectedResult.attributes.itemsContainer['aria-label']).toEqual(label);
        });
        test('do NOT set aria attributes when carousel has NO navigation', function () {
            var expectedResult = accessibility_1.carouselBehavior(__assign({ ariaLiveOn: false, navigation: false, 'aria-roledescription': roleDescription, 'aria-label': label }, paddleHiddenProps));
            expect(expectedResult.attributes.itemsContainer['aria-roledescription']).toBeUndefined();
            expect(expectedResult.attributes.itemsContainer['aria-label']).toBeUndefined();
        });
        test("sets \"role=none\" when carousel has NO navigation", function () {
            var expectedResult = accessibility_1.carouselBehavior(__assign({ ariaLiveOn: false, navigation: false }, paddleHiddenProps));
            expect(expectedResult.attributes.itemsContainer.role).toEqual('none');
        });
        test("sets \"tabindex=-1\" when carousel has NO navigation", function () {
            var expectedResult = accessibility_1.carouselBehavior(__assign({ ariaLiveOn: false, navigation: false }, paddleHiddenProps));
            expect(expectedResult.attributes.itemsContainer.tabIndex).toEqual(-1);
        });
    });
});
