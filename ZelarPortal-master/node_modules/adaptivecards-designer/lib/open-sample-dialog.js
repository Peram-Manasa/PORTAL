"use strict";
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.OpenSampleDialog = void 0;
var ACData = require("adaptivecards-templating");
var Adaptive = require("adaptivecards");
var dialog_1 = require("./dialog");
var OpenSampleItem = /** @class */ (function () {
    function OpenSampleItem(props) {
        this.props = props;
    }
    OpenSampleItem.getNewItemId = function (prefix) {
        var newId = prefix + "-" + OpenSampleItem._id;
        OpenSampleItem._id++;
        return newId;
    };
    OpenSampleItem.prototype.render = function () {
        var _this = this;
        var _a;
        var newItemId = OpenSampleItem.getNewItemId("acd-open-sample-item-title");
        var element = document.createElement("div");
        element.className = "acd-open-sample-item";
        element.tabIndex = 0;
        element.setAttribute("aria-labelledBy", newItemId);
        element.setAttribute("role", "listitem");
        element.onclick = (_a = this.props.onClick) !== null && _a !== void 0 ? _a : (function (e) {
            if (_this.onComplete) {
                if (_this.props.cardData instanceof Function) {
                    var cardData = _this.props.cardData(_this.onComplete);
                    if (cardData) {
                        _this.onComplete(cardData);
                    }
                }
                else if (_this.props.cardData) {
                    _this.onComplete(_this.props.cardData);
                }
            }
        });
        var thumbnailHost = document.createElement("div");
        thumbnailHost.className = "acd-open-sample-item-thumbnail";
        if (this.props.cardData instanceof Function) {
            var spinner_1 = document.createElement("div");
            spinner_1.className = "acd-spinner";
            spinner_1.style.width = "28px";
            spinner_1.style.height = "28px";
            thumbnailHost.appendChild(spinner_1);
            var cardData = this.props.cardData(function (cardData) {
                thumbnailHost.removeChild(spinner_1);
                if (cardData.thumbnail instanceof Function) {
                    thumbnailHost.appendChild(cardData.thumbnail());
                }
                else if (cardData.thumbnail) {
                    thumbnailHost.appendChild(cardData.thumbnail);
                }
            });
            if (cardData) {
                thumbnailHost.removeChild(spinner_1);
                if (cardData.thumbnail instanceof Function) {
                    thumbnailHost.appendChild(cardData.thumbnail());
                }
                else if (cardData.thumbnail) {
                    thumbnailHost.appendChild(cardData.thumbnail);
                }
            }
        }
        else if (this.props.cardData) {
            if (this.props.cardData.thumbnail instanceof Function) {
                thumbnailHost.appendChild(this.props.cardData.thumbnail());
            }
            else if (this.props.cardData.thumbnail) {
                thumbnailHost.appendChild(this.props.cardData.thumbnail);
            }
        }
        var displayNameElement = document.createElement("div");
        displayNameElement.className = "acd-open-sample-item-title";
        displayNameElement.id = newItemId;
        displayNameElement.innerText = this.props.label;
        element.appendChild(thumbnailHost);
        element.appendChild(displayNameElement);
        return element;
    };
    OpenSampleItem._id = 0;
    return OpenSampleItem;
}());
var OpenSampleDialog = /** @class */ (function (_super) {
    __extends(OpenSampleDialog, _super);
    function OpenSampleDialog(props) {
        var _this = _super.call(this) || this;
        _this.props = props;
        return _this;
    }
    OpenSampleDialog.prototype.renderSection = function (title, items) {
        var _this = this;
        var renderedElement = document.createElement("div");
        if (title) {
            var titleElement = document.createElement("div");
            titleElement.className = "acd-dialog-title";
            titleElement.innerText = title;
            titleElement.style.marginTop = "10px";
            renderedElement.appendChild(titleElement);
        }
        var listElement = document.createElement("div");
        listElement.className = "acd-open-sample-item-container";
        listElement.setAttribute("role", "list");
        for (var _i = 0, items_1 = items; _i < items_1.length; _i++) {
            var item = items_1[_i];
            if (!item)
                continue;
            var itemElement = new OpenSampleItem(item);
            itemElement.onComplete = function (output) {
                _this._output = output;
                _this.close();
            };
            listElement.appendChild(itemElement.render());
        }
        renderedElement.appendChild(listElement);
        return renderedElement;
    };
    OpenSampleDialog.prototype.renderContent = function () {
        var _this = this;
        var renderedElement = document.createElement("div");
        renderedElement.style.overflow = "auto";
        var featuredSection = this.renderSection(null, OpenSampleDialog._builtinItems.concat(this.props.handlers));
        renderedElement.appendChild(featuredSection);
        if (this.props.catalogue) {
            var divider = document.createElement("hr");
            renderedElement.appendChild(divider);
            this.props.catalogue.onDownloaded = function (sender) {
                if (sender.isDownloaded) {
                    var catalogueSection = _this.renderSection("Explore", _this.props.catalogue.entries.map(function (entry) {
                        return {
                            label: entry.displayName,
                            cardData: function (callback) {
                                entry.onDownloaded = function (sender) {
                                    var success = sender.cardPayloadDownloaded;
                                    if (success) {
                                        try {
                                            var cardPayload = JSON.parse(sender.cardPayload);
                                            var card = new Adaptive.AdaptiveCard();
                                            var cardData = sender.sampleData ?
                                                new ACData.Template(cardPayload).expand({
                                                    $root: JSON.parse(sender.sampleData)
                                                })
                                                : cardPayload;
                                            card.parse(cardData);
                                            card.render();
                                            card.renderedElement.style.width = "100%";
                                            return callback({
                                                cardPayload: entry.cardPayload,
                                                sampleData: entry.sampleData,
                                                thumbnail: card.renderedElement,
                                            });
                                        }
                                        catch (e) {
                                            // Swallow the exception
                                            console.error("Unable to load card sample. Error: " + e);
                                            success = false;
                                        }
                                    }
                                };
                                entry.download();
                            },
                        };
                    }));
                    renderedElement.appendChild(catalogueSection);
                }
                else {
                    console.error("Sender is not downloaded");
                }
            };
            this.props.catalogue.download();
        }
        var firstChild = featuredSection.firstElementChild;
        firstChild.focus();
        return renderedElement;
    };
    Object.defineProperty(OpenSampleDialog.prototype, "output", {
        get: function () {
            return this._output;
        },
        enumerable: false,
        configurable: true
    });
    OpenSampleDialog._builtinItems = [
        {
            label: "Blank Card",
            cardData: {
                cardPayload: JSON.stringify({
                    type: "AdaptiveCard",
                    $schema: "http://adaptivecards.io/schemas/adaptive-card.json",
                    version: "1.0",
                    body: []
                }),
            },
        },
    ];
    return OpenSampleDialog;
}(dialog_1.Dialog));
exports.OpenSampleDialog = OpenSampleDialog;
//# sourceMappingURL=open-sample-dialog.js.map