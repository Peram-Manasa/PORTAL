"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.RendererProvider = void 0;
var fela_dom_1 = require("fela-dom");
var React = require("react");
// Copied from https://github.com/robinweser/fela/blob/master/packages/fela-bindings/src/RendererProviderFactory.js
function hasDOM(renderer, targetDocument) {
    // ensure we're on a browser by using document since window is defined in e.g. React Native
    // see https://github.com/robinweser/fela/issues/736
    if (typeof document === 'undefined') {
        return false;
    }
    var doc = targetDocument || document;
    return renderer && doc && doc.createElement;
}
function hasServerRenderedStyle(targetDocument) {
    if (targetDocument === void 0) { targetDocument = document; }
    return targetDocument.querySelectorAll('[data-fela-type]').length > 0;
}
var RendererProvider = /** @class */ (function (_super) {
    __extends(RendererProvider, _super);
    function RendererProvider(props) {
        var _this = _super.call(this, props) || this;
        _this._renderStyle();
        return _this;
    }
    RendererProvider.prototype.componentDidUpdate = function (prevProps) {
        if (prevProps.renderer !== this.props.renderer) {
            // add warning that renderer is changed
            this._renderStyle();
        }
    };
    RendererProvider.prototype._renderStyle = function () {
        var _a = this.props, renderer = _a.renderer, shouldRehydrate = _a.rehydrate, targetDocument = _a.targetDocument;
        if (hasDOM(renderer, targetDocument)) {
            if (shouldRehydrate && hasServerRenderedStyle(targetDocument)) {
                fela_dom_1.rehydrate(renderer, targetDocument);
            }
            else {
                fela_dom_1.render(renderer, targetDocument);
            }
        }
    };
    RendererProvider.prototype.render = function () {
        return React.createElement(React.Fragment, null, this.props.children);
    };
    return RendererProvider;
}(React.Component));
exports.RendererProvider = RendererProvider;
